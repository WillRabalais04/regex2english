/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'antlr'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    // Use JUnit test framework.
    testImplementation libs.junit

    // This dependency is used by the application.
    implementation libs.guava

    implementation "hu.webarticum:tree-printer:3.2.0"
    antlr "org.antlr:antlr4:4.9.2"
    implementation "info.picocli:picocli:4.7.6"
    implementation 'info.picocli:picocli-codegen:4.7.1'
    implementation group: 'com.googlecode.lanterna', name: 'lanterna', version: '3.1.2'   

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'rabalais.regex2english.App'
}


tasks{
    
    generateGrammarSource {
    arguments += ["-visitor", "-no-listener", "-package", "rabalais.regex2english.generated"]
    outputDirectory = file("${projectDir}/src/main/java/rabalais/regex2english/generated")
     
    doLast {
        println "Deleting duplicate directory created on save in VSCode."
        delete 'src/main/antlr/.antlr'
    }
} 

compileJava{
    dependsOn(generateGrammarSource)
}

clean{

    delete "${projectDir}/src/main/java/rabalais/regex2english/generated"
    delete "../cli/out.txt"
    
    delete fileTree('../cli/') {
    include '**/*.class'
    }
}

// task generateManpageAsciiDoc(type: JavaExec) {
//     dependsOn(classes)
//     group = "Documentation"
//     description = "Generate AsciiDoc manpage"
//     classpath(configurations.compileClasspath, configurations.annotationProcessor, sourceSets.main.runtimeClasspath)
//     main 'picocli.codegen.docgen.manpage.ManPageGenerator'
//     args 'rabalais.regex2english.App', "--outdir=${project.buildDir}/generated-picocli-docs", "-v", "--template-dir=src/docs/mantemplates"
// }

// apply plugin: 'org.asciidoctor.jvm.convert'
// asciidoctor {
//     dependsOn(generateManpageAsciiDoc)
//     sourceDir = file("${project.buildDir}/generated-picocli-docs")
//     outputDir = file("${project.buildDir}/docs")
//     logDocuments = true
//     outputOptions {
//         backends = ['manpage', 'html5']
//     }
// }
// assemble.dependsOn(asciidoctor)

}