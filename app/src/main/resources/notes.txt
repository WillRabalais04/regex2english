TODO: 
- add all boundary matchers to grammar (some were forgotten)
- check all tokens are used in grammar rules
- Figure out size limits
- for lookaheads, treat them differently when traversing the AST so what they reference is clear
- Implement referential atoms
- Add test cases
- change getAtomIndex to to take Atom as parameter instead of node
- color tree based on whether it's a terminal or not or by categores even
- Add features after the parse tree is created that treat edge cases like:
    - ^a$bc$ cannot match anything but the parser parses it so must add some error detection

____________________________________________________________________
New Feature Ideas:
- Linting:
    use printed arrows to show relations between referentials below the string and show groups above the string
        - also do it for groups, showing when they begin and end
        G1      G2        G3    
        ⎡‾‾‾‾⎤⎡‾‾‾‾‾‾‾‾⎤⎡‾‾‾‾‾‾‾‾‾⎤
        ^([asd])(?=.*\d\d)(?=.*[a-z]){8,16}$
        ⎣__________________________________⎦
                        Bounds

    highlight 4 distinct categories (atoms, operators/quantifiers, referentials, groups):
        -atoms: literals (inc. escaped characters), character classes, 
        -referentials: lookaheads, anchors, back references, 
        -operators/quantifiers: |, *,{m,n}, etc...
        -groups: capture groups
____________________________________________________________________
Commands:

- r2e [input] [flags]

- Default Behavior: lints regex like shown above

flags: 
- "-a" breaks it up into atoms
- "-c" breaks it up by character
- "-cmp" compact mode, breaks up by strings instead of characters
- "-h" [type] - highlights all instances of a given type
- "-ls" list all atoms
- "-k" prints key
- "-t" prints parsetree
- "-tl" prints parsetree as vertical list
____________________________________________________________________

Current List of Strings that Fail:
____________________________________________________________________
-  [\s\s]
- [abc][\s\s]"
- [\s\s][abc]
- (?asfasd) // zero width assertions without the equal sign
- [abcd] // doesn't split up by letters
- [abc{2}++abva] // treats {2} as a quantifier when it shouldn't
- [a-zasdf] does not recognize range a-z
____________________________________________________________________
Definitions:

Atoms are Defined As:

(escapedToLiteralOutsideCharClassContext 
| QuoteContext
| InlineModifierContext
| CaptureGroupContext
| EscapedFromLiteralContext 
| CharacterClassContext
| NonWordBoundaryContext
| InputStartContext
| LetterContext
| EndOfInputExceptFinalTerminator
)

Referential Atoms are Defined As:

Types of Atoms that Reference Other Atoms: 
- Boundary matchers
- Quantifiers
- Or 
- capturing groups 
- Special constructs (named-capturing and non-capturing)
    - (?<name>X)	X, as a named-capturing group
    - (?:X)	X, as a non-capturing group
    - (?idmsuxU-idmsuxU) 	Nothing, but turns match flags i d m s u x U on - off
    - (?idmsux-idmsux:X)  	X, as a non-capturing group with the given flags i d m s u x on - off
    - (?=X)	X, via zero-width positive lookahead
    - (?!X)	X, via zero-width negative lookahead
    - (?<=X)	X, via zero-width positive lookbehind
    - (?<!X)	X, via zero-width negative lookbehind
    - (?>X)	X, as an independent, non-capturing group
____________________________________________________________________