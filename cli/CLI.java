/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cli;

import java.io.IOException;
import java.io.FileReader;
import java.io.BufferedReader;

import java.util.Arrays;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.TimeUnit;

import java.io.InputStreamReader;
import com.googlecode.lanterna.*;
import com.googlecode.lanterna.terminal.*;
import com.googlecode.lanterna.screen.*;
import com.googlecode.lanterna.gui2.*;
import com.googlecode.lanterna.graphics.*;
import com.googlecode.lanterna.TextColor.*;
import com.googlecode.lanterna.SGR;
import com.googlecode.lanterna.input.*;
import com.googlecode.lanterna.input.MouseAction.*;
import com.googlecode.lanterna.terminal.ansi.UnixTerminal;

// add gettermheight getter

public class CLI{

    private static Panel mainPanel;
    private static Panel topPanel;
    private static Panel inputPanel;
    private static Panel bottomPanel;
    private static Panel buttonsPanel;
    private static Panel viewingModePanel;
    private static TextBox displayText;
    private static TextBox inputTextBox;
    private static Button enterButton;
    private static Button clearButton;
    private static Button guideButton;
    private static Button quitButton;
    private static CheckBoxList<String> checkBoxList;
    private static boolean arrowsModeToggle;
    private static boolean mousePanModeToggle;
    private static String guide;
    private static TerminalPosition lastClickCoords = null;
    private static String content = "content";
    // private static String content = "-\n-\n--\n";

    public static void main(String[] args) throws IOException{
        init();

      
    }


    private static void init() throws IOException{
        UnixTerminal terminal = new UnixTerminal();

        terminal.setMouseCaptureMode(MouseCaptureMode.CLICK_RELEASE_DRAG_MOVE);

        Screen screen = new TerminalScreen(terminal);        

        screen.startScreen();

        WindowBasedTextGUI textGUI = new MultiWindowTextGUI(screen, new DefaultWindowManager(), new EmptySpace(TextColor.ANSI.BLACK));
        SimpleTheme theme = new SimpleTheme(TextColor.ANSI.GREEN, TextColor.ANSI.BLACK, SGR.BOLD);
        textGUI.setTheme(theme);

        BasicWindow window = new BasicWindow();
        window.setHints(Arrays.asList(Window.Hint.CENTERED));

        arrowsModeToggle = true;
        mousePanModeToggle = false;    
        
        mainPanel = new Panel();
        topPanel = new Panel();
        bottomPanel = new Panel(new GridLayout(2));
        inputPanel = new Panel();
        buttonsPanel = new Panel();
        viewingModePanel = new Panel();
  
        displayText = new TextBox("");
        displayText.setReadOnly(true);
        displayText.setCaretWarp​(true);
        inputTextBox = new TextBox("-t ^(?=.*\\d\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=shadowJar\\s).{8,16}$", TextBox.Style.MULTI_LINE);
        inputTextBox.setCaretWarp​(true);
        // inputTextbox.setText("asdfasdfds");

        // TextBox.DefaultTextBoxRenderer renderer = new MyTextBoxRenderer();

        // renderer.setHideScrollbars(true);

        // displayText.setRenderer(renderer);

        checkBoxList = new CheckBoxList<String>(new TerminalSize(20,20));
        checkBoxList.addItem("Arrows", true);
        checkBoxList.addItem("Mouse Pan", false);
        
        enterButton = new Button("Enter", () -> {
            // displayText.addLine(terminal.getCursorLocation().getColumn() + "x" + terminal.getCursorLocation().getRow());    
            String inputText = inputTextBox.getText();
            try{     

                if(inputText == null || inputText == ""){
                    displayText.setText("Please enter a valid input.");
                }else{
                
                String cmd =  "gradle run --args=\"" + inputText + "\"";

                ProcessBuilder runGradle = new ProcessBuilder("bash", "-c",cmd);
                Process process = runGradle.start();
                
                System.out.println("Starting process");
                int exitCode = process.waitFor();
                System.out.println("Process complete!");

                // System.out.println("exitcode: " + exitCode);

                if(exitCode == 0){
                    FileReader fileReader = new FileReader("cli/out.txt");
                    BufferedReader bufferedReader = new BufferedReader(fileReader);
                    
                    StringBuilder sb = new StringBuilder();
                    String line = bufferedReader.readLine();
                    while (line != null) {
                        sb.append(line);
                        sb.append(System.lineSeparator());
                        line = bufferedReader.readLine();                
                    }
                    fileReader.close();
                    bufferedReader.close();
                    process.destroy();

                    content = sb.toString();
                    if(!content.equals("")){
                        displayText.setText(content);
                    }
                    else{                  
                        displayText.setText("Input could not be read.");
                    }
                } else{
                    // Capture and display the error output
                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
                StringBuilder errorMessage = new StringBuilder();
                String errorLine;
                while ((errorLine = errorReader.readLine()) != null) {
                    errorMessage.append(errorLine).append(System.lineSeparator());
                }
                errorReader.close();
                displayText.setText("Error: " + errorMessage.toString());
                    System.out.println("Backend parsing failed.");
                }
            }

            // still need to figure out how much to augment with by
            // System.out.println("term width" + terminal.getTerminalSize().getColumns());
            // System.out.println("term height" + terminal.getTerminalSize().getRows());
            // System.out.println("displayText width" + displayText.getSize().getColumns());
            // System.out.println("displayText height" + displayText.getSize().getRows());
            // System.out.println("displayText pref width" + displayText.getPreferredSize().getColumns());
            // System.out.println("displayText pref height" + displayText.getPreferredSize().getRows());
            // System.out.println("displayText linecount" + displayText.getLineCount());
            // System.out.println("line1length" + displayText.getLine(0).length());
            // displayText.setCaretPosition(Integer.MAX_VALUE);
            // System.out.println("caret pos: " + displayText.getCaretPosition().getColumn());
            // int longest = 0;
            // for(int i = 0; i < displayText.getLineCount(); i++){
            //     int currLength = displayText.getLine(i).length();
            //     if(currLength > longest){
            //         longest = currLength;
            //     }

            // }

            // System.out.println("longest: " + longest);

            
            }
            catch(Exception e){
                e.printStackTrace();
                System.out.println("Frontend can't reach backend.");
            }
            displayText.takeFocus();

        });


        clearButton = new Button("Clear", () -> {
            clear();
        });

        guideButton = new Button("Guide", () -> {
            showGuide();
        });

        quitButton = new Button("↳Quit", () -> {
          System.exit(0);
        });


        topPanel.addComponent(displayText);

        viewingModePanel.addComponent(checkBoxList);

        inputPanel.addComponent(inputTextBox);

        buttonsPanel.addComponent(enterButton);
        buttonsPanel.addComponent(clearButton);
        buttonsPanel.addComponent(guideButton);
        buttonsPanel.addComponent(quitButton);

        bottomPanel.addComponent(buttonsPanel);
        bottomPanel.addComponent(viewingModePanel.withBorder(Borders.doubleLine("Viewing Mode")));

        mainPanel.addComponent(topPanel.withBorder(Borders.doubleLine()));
        mainPanel.addComponent(inputPanel.withBorder(Borders.doubleLine("Input")));
        mainPanel.addComponent(bottomPanel.withBorder(Borders.doubleLine()));

        setSizeOfAllComponents(screen.getTerminalSize());

        window.setComponent(mainPanel);
  
        terminal.addResizeListener(new TerminalResizeListener() {
            @Override
            public void onResized(Terminal terminal, TerminalSize newSize) {

                setSizeOfAllComponents(newSize);
                try {
                   
                    screen.refresh();
                }
                catch(Exception e) {
                    System.out.println("Terminal window resize failed!");
                }
            }
        });

        checkBoxList.addListener(new CheckBoxList.Listener() {
            @Override
            public void onStatusChanged(int itemIndex, boolean checked) {
                if(itemIndex == 0){
                    arrowsModeToggle = checked;
                    mousePanModeToggle = !checked; 
                    if(checked){displayText.takeFocus();}
                }else if(itemIndex == 1){
                    mousePanModeToggle = checked;
                    arrowsModeToggle = !checked; 
                    if(checked){displayText.takeFocus();}
                    try{
                        terminal.setCursorVisible(true);
                        TerminalSize topPanelSize = topPanel.getSize();
                        int verticalOffset = inputPanel.getSize().getRows() + bottomPanel.getSize().getRows() + 2;
                        terminal.setCursorPosition(topPanelSize.getColumns() / 2, topPanelSize.getRows() / 2 + verticalOffset);
                    } catch (Exception e){
                        System.out.println("mousemovefailed");
                    }
                }
                
            }
        });

        WindowListenerAdapter listener = new WindowListenerAdapter(){
            @Override
            public void onInput​(Window basePane, KeyStroke keyStroke, AtomicBoolean deliverEvent){
            // if(keyStroke.getCharacter() == 'q' && keyStroke.isAltDown()){ // ALT+Q to quit
            // //     System.exit(0);
            // // }

            // // if(keyStroke.isShiftDown​()){ // ALT+Q to quit
            // //     displayText.addLine("ALTDOWN");
            // // }

            // // if(keyStroke.getCharacter() == 'ç'){ // ALT+C to clear
            // //     clear();
            // // }

            // // if(keyStroke.getCharacter() == '©'){ // ALT+G to show guide
            // //     showGuide();
            // // }

            // // if(keyStroke.isShiftDown​()){
            // //     displayText.takeFocus();
            // // }
            
            // if(displayText.isFocused()){

            //     TerminalSize size = displayText.getSize();
            //     TerminalSize displayTextSize = getDisplayTextSize();
                
            //     TerminalPosition pos = displayText.getCaretPosition();
            //     int currX = pos.getColumn();
            //     int currY = pos.getRow();

            //     int displayWidth = size.getColumns();
            //     int displayHeight = size.getRows();

            //     int textWidth = displayTextSize.getColumns();
            //     int textHeight = displayTextSize.getRows();


            //     KeyType type = keyStroke.getKeyType();

            //     if(type.equals(KeyType.MouseEvent)){     
                    
            //         try{

            //             TerminalSize termSize = displayText.getSize();

            //             MouseActionType	mouseActionType = ((MouseAction)keyStroke).getActionType();

            //             if(mouseActionType.equals(MouseActionType.CLICK_DOWN)){
        
            //                 lastClickCoords = ((MouseAction)keyStroke).getPosition();


            //             }

            //             if(mouseActionType.equals(MouseActionType.CLICK_RELEASE) && lastClickCoords != null){

                        
            //                 TerminalSize preferredSize = displayText.getPreferredSize();
            //                 // displayText.addLine("displayWidth: " + displayWidth + "| displayHeight: " + displayHeight);
            //                 // displayText.addLine("real width: " + displayTextSize.getColumns() + "| real height: " +  displayTextSize.getRows());
            //                 // displayText.addLine(content);
            //                 TerminalPosition newCoords = ((MouseAction)keyStroke).getPosition();

            //                 int deltaX = newCoords.getColumn() - lastClickCoords.getColumn();
            //                 int deltaY = newCoords.getRow() - lastClickCoords.getRow();
            //                 // displayText.addLine("StartX: " + lastClickCoords.getColumn() + "| StartY: " + lastClickCoords.getRow());   
            //                 // displayText.addLine("EndX: " + newCoords.getColumn() + "| End: " + newCoords.getRow());                      
            //                 // displayText.addLine("deltaX: " + deltaX + "| deltaY: " + deltaY);
            //                 // displayText.addLine("currScrollX: " + currX + "| currScrollY: " + currY);


            //                 int newX = currX + deltaX;
            //                 int newY = currY + deltaY;
            //                 // displayText.addLine("newScrollX: " + newX + "| newScrollY: " + newY);
            //                 // displayText.addLine("newScrollX: " + newX + "| newScrollY: " + newY);

                    

            //                 // displayText.addLine("drag");
            //                 // displayText.addLine("Click Pos: " + lastClickCoords.getColumn() + "x" + lastClickCoords.getRow() + "");
            //                 // displayText.addLine("Release Pos: " + newCoords.getColumn() + "x" + newCoords.getRow() + "");
            //                 displayText.setCaretPosition​(newX, newY);


            //             }

            //             } catch(Exception e){
            //                 e.printStackTrace();
            //                 displayText.setText("exception thrown");
            //             }

            //         }
            
            //     // Arrows Mode:
            //     if(arrowsModeToggle){

            
        
                
            //         int newX;
            //         int newY;


            //         // if(keyStroke.getKeyType().equals(KeyType.ArrowDown) || keyStroke.RealF3.().equals(MouseActionType.SCROLL_DOWN)){
            //         if(type.equals(KeyType.ArrowDown)){
            //             newY = currY - (displayHeight / 10);
            //             displayText.setCaretPosition​(currX , newY);
                        
            //         // } else if(keyStroke.getKeyType().equals(KeyType.ArrowUp) || keyStroke.getActionType().equals(MouseActionType.SCROLL_UP)){
            //         } else if(type.equals(KeyType.ArrowUp)){
            //             newY = currY + (textHeight / 10);
            //             displayText.setCaretPosition​(currX , newY);
            //         }else if(type.equals(KeyType.ArrowLeft)){
            //             newX = currX - textWidth / 10;
            //             inputTextBox.setText("bazuina");
            //             // newX = ((newX > textWidth) ? textWidth: newX);
            //             // newX = ((newX < 0) ? 0: textWidth);
            //             displayText.setCaretPosition​(0 , 0);
            //         }else if(type.equals(KeyType.ArrowRight)){
            //             newX = currX + (textWidth / 10);
            //             // inputTextBox.addLine("textWidth: " + textWidth + "| currX:" + currX + "| newX: " + newX);

            //             newX = ((newX > textWidth) ? textWidth: newX);
            //             newX = ((newX < 0) ? 0: newX);
            //             displayText.setCaretPosition​(newX , currY);
            //         }

            //     }
            //     // else if(mousePanModeToggle){

                  

            // //         try{


            // //             // switch to drag it mode instead of mousepan

                   

            // //             int verticalOffset = inputPanel.getSize().getRows() + bottomPanel.getSize().getRows() + 2;

            // //             int termWidth = termSize.getColumns();
            // //             int termHeight = termSize.getRows() - verticalOffset;

            // //             int centerX = mainPanel.getSize().getColumns() / 2;
            // //             int centerY = topPanel.getSize().getRows() / 2 + verticalOffset;

            // //             displayText.addLine(centerX + "x" + centerY);
            // //             displayText.addLine("termHeight" + termHeight);


            // //             int xOffset = mouseX - centerX;
            // //             int yOffset = mouseY - centerY;

            // //             if(xOffset > 0 && mouseX < termWidth){
            // //                 displayText.setCaretPosition​(mouseX - 1, mouseY);
            // //             } else if (xOffset < 0 && mouseX > 0){
            // //                 displayText.setCaretPosition​(mouseX + 1, mouseY);
            // //             } else {
            // //                 displayText.addLine("1| xOffset: " + xOffset + " | mouseX: " + mouseX + "| termWidth: " + termWidth);
            // //             }

            // //         }
            // //             catch(Exception e){

            // //             }
            // //         }
            //     }
            }

    };

        // WindowAdapter windowListener = new WindowAdapter();
        window.addWindowListener(listener);

        textGUI.addWindowAndWait(window); 
    
    }
    private static void setSizeOfAllComponents(TerminalSize size){

        //main panel:
        mainPanel.setPreferredSize(size);
        GridLayout mainPanelLayout =  new GridLayout(1)    
        .setLeftMarginSize(1)
        .setRightMarginSize(1)
        .setTopMarginSize(0)
        .setBottomMarginSize(0);
        mainPanelLayout.createLayoutData(GridLayout.Alignment.CENTER,GridLayout.Alignment.END,true,true);
        mainPanel.setLayoutManager(mainPanelLayout);

        int cols = size.getColumns();
        int rows = size.getRows();

        checkBoxList.setPreferredSize(new TerminalSize(40,20));
        
        // bottom panel:
        bottomPanel.setPreferredSize(new TerminalSize(cols, 20));

        //input panel:
        inputPanel.setPreferredSize(new TerminalSize(cols, 20));

        // ViewingMode Panel:
        viewingModePanel.setPreferredSize(new TerminalSize(40, 20));

        //buttons panel:
        buttonsPanel.setPreferredSize(new TerminalSize(cols, 18));

        // textboxes:
        inputTextBox.setPreferredSize(new TerminalSize(cols, 20));

        // buttons:
        enterButton.setPreferredSize(new TerminalSize(cols, 2));
        clearButton.setPreferredSize(new TerminalSize(cols, 2));
        guideButton.setPreferredSize(new TerminalSize(cols, 2));
        quitButton.setPreferredSize(new TerminalSize(cols, 2));

        // top panel:
        topPanel.setPreferredSize(new TerminalSize(cols,rows));
        displayText.setPreferredSize(new TerminalSize(cols, rows));


    }

    private static void clear(){

        inputTextBox.setText("");
    }

    private static void showGuide(){
        guide = ""; // setup man page with picocli
        displayText.setText(guide);
    }

    private static TerminalSize getDisplayTextSize(){

        String[] lines = content.split("\n");
        int maxLineLength = 0;
        
        for (String line : lines) {
            int length = line.length();
            if (length > maxLineLength) {
                maxLineLength = length;
            }
        }
        
        return new TerminalSize(maxLineLength, lines.length);
    }
        
    

}

